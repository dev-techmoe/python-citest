name: build
on:
  push:
    tags:
      - '*'

jobs:
  build-linux:
    name: build-linux
    runs-on: ubuntu-20.04
    strategy:
        matrix:
          python-version: [ 3.8.2 ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install poetry
          poetry update
          poetry install
      - name: Build executable file
        run: |
          poetry run pyinstaller jsonip/cli.py -F
      - name: Stash release file
        uses: actions/upload-artifact@v2
        with:
          name: linux
          path: ./dist/cli
      - name: Test app executable
        run: |
          chmod +x ./dist/cli
          ./dist/cli || true

  build-linux-arm:
    name: build-linux-arm
    runs-on: ubuntu-20.04
    strategy:
        matrix:
          python-version: [ 3.8.2 ]
          arch: [ armv7, aarch64 ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - uses: uraimo/run-on-arch-action@v2.0.5
        name: Run commands
        id: runcmd
        with:
          arch: armv7
          distro: ubuntu18.04
          githubToken: ${{ github.token }}
          run: |
            echo "\ndeb http://ppa.launchpad.net/deadsnakes/ppa/ubuntu bionic main" >> /etc/apt/source.list
            apt-get update
            apt-get install python3.8 python3.8-dev python3-pip python3.8-venv -y
            python3.8 -m pip install poetry
            poetry install --no-ansi
            poetry run pyinstaller jsonip/cli.py -F
      - name: Stash release file
        uses: actions/upload-artifact@v2
        with:
          name: linux-arm
          path: ./dist/cli
      - name: Test app executable
        run: |
          chmod +x ./dist/cli
          ./dist/cli || true
          
  build-zipapp:
    name: build-zipapp
    runs-on: ubuntu-20.04
    strategy:
        matrix:
          python-version: [ 3.8.2 ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies and build standalone zipapp
        run: |
          python -m pip install poetry
          poetry install
          poetry export -f requirements.txt --without-hashes > requirements.txt

          # modify info to your app's
          mkdir pyz
          cp -R jsonip pyz
          poetry run pip install -r requirements.txt --target pyz
          poetry run python -m zipapp -m 'jsonip.cli:run' pyz
      - name: Stash release file
        uses: actions/upload-artifact@v2
        with:
          name: zipapp
          path: ./pyz.pyz
  
  release:
    name: release
    needs: ['build-linux', 'build-linux-arm', 'build-zipapp']
    runs-on: ubuntu-20.04

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v2
      - name: ls
        run: |
          sudo apt-get -y install tree
          tree || true
          ls -lah
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: true
      - name: Upload Release - linux
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} 
          asset_path: linux/cli
          asset_name: linux-386-jsonip
          asset_content_type: application/x-binary
      - name: Upload Release - linux arm
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} 
          asset_path: linux-arm/cli
          asset_name: linux-armhf-jsonip
          asset_content_type: application/x-binary
      - name: Upload Release - zipapp
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} 
          asset_path: zipapp/pyz.pyz
          asset_name: jsonip.pyz
          asset_content_type: application/x-binary