name: build
on:
  push:
    tags:
      - '*'
env:
  project-name: jsonip
  pyinstaller-entry: jsonip/__main__.py

jobs:
  create-release:
    name: create-release
    runs-on: ubuntu-20.04
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: true
          prerelease: true

  build-linux:
    name: build-linux
    runs-on: ubuntu-20.04
    needs: [ 'create-release' ]
    strategy:
        matrix:
          python-version: [ 3.8.2 ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install poetry
          poetry update
          poetry install
      - name: Build executable file
        run: |
          poetry run pyinstaller ${{ env.pyinstaller-entry }} -F
          cd dist
          mv $(ls | awk 'NR==1{print $0}') app
      - name: Upload Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }} 
          asset_path: ./dist/app
          asset_name: ${{ env.project-name }}-linux-amd64
          asset_content_type: application/x-binary

  build-linux-arm:
    name: build-linux-arm
    runs-on: ubuntu-20.04
    needs: [ 'create-release' ]
    strategy:
        matrix:
          python-version: [ 3.8.2 ]
          arch: [ armv7, aarch64 ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - uses: uraimo/run-on-arch-action@v2.0.5
        name: Install dependencies and build app
        id: runcmd
        with:
          arch: ${{ matrix.arch }}
          distro: ubuntu18.04
          githubToken: ${{ github.token }}
          install: |
            echo "\ndeb http://ppa.launchpad.net/deadsnakes/ppa/ubuntu bionic main" >> /etc/apt/source.list
            apt-get update
            apt-get install python3.8 python3.8-dev python3-pip python3.8-venv -y
            python3.8 -m pip install poetry
          run: |
            poetry install --no-ansi
            poetry run pyinstaller ${{ env.pyinstaller-entry }} -F
            cd dist
            mv $(ls | awk 'NR==1{print $0}') app
      - name: Upload Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }} 
          asset_path: ./dist/app
          asset_name: ${{ env.project-name }}-linux-${{ matrix.arch }}
          asset_content_type: application/x-binary
  
  build-windows-x64:
    name: build-windows-x64
    runs-on: windows-2019
    needs: [ 'create-release' ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies and build app
        run: |
          python -m pip install poetry
          poetry install --no-ansi
          poetry run pyinstaller ${{ env.pyinstaller-entry }} -F

          cd dist
          $file = Get-ChildItem .;
          $file = $file[0].Name
          mv $file app.exe
      - name: Upload Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }} 
          asset_path: ./dist/app.exe
          asset_name: ${{ env.project-name }}-windows-amd64.exe
          asset_content_type: application/x-binary
  
  # build-zipapp:
  #   name: build-zipapp
  #   runs-on: ubuntu-20.04
  #   needs: [ 'create-release' ]
  #   strategy:
  #       matrix:
  #         python-version: [ 3.8.2 ]
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v2
  #     - name: Set up Python ${{ matrix.python-version }}
  #       uses: actions/setup-python@v2
  #       with:
  #         python-version: ${{ matrix.python-version }}
  #     - name: Install dependencies and build standalone zipapp
  #       run: |
  #         python -m pip install poetry
  #         poetry install
  #         poetry export -f requirements.txt --without-hashes > requirements.txt

  #         # modify info to your app's
  #         mkdir pyz
  #         cp -R jsonip pyz
  #         poetry run pip install -r requirements.txt --target pyz
  #         poetry run python -m zipapp -m 'jsonip.cli:run' pyz
  #     - name: Upload Release
  #       uses: actions/upload-release-asset@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         upload_url: ${{ needs.create-release.outputs.upload_url }} 
  #         asset_path: ./pyz.pyz
  #         asset_name: ${{ env.project-name }}.pyz
  #         asset_content_type: application/x-binary